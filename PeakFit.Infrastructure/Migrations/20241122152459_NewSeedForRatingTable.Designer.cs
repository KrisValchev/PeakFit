// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeakFit.Web.Data;

#nullable disable

namespace PeakFit.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122152459_NewSeedForRatingTable")]
    partial class NewSeedForRatingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of category");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Core"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Arms"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Back"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Chest"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Legs"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Shoulders"
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Comment identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Comment's description");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("Event identifier which the comment is posted on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if comment is deleted");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Comment's date of posting");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Comment's title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier who posted the comment ");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "I can't wait untill the beginning of the event. It's going to be awesome!",
                            EventId = 1,
                            IsDeleted = false,
                            PostedOn = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Big excitement",
                            UserId = "3ca894f3-b3ef-493f-a694-8c3ef2b2c855"
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Event identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Event's description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event's banner");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if event is deleted");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Event's date of starting");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("datetime2")
                        .HasComment("Event's hour of starting");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Event's title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Trainer identifier who created the event");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The Marathon is an exhilarating long-distance running event, bringing together athletes, enthusiasts, and supporters for a memorable day of endurance and community spirit. Held in Plovdiv, this marathon offers participants a chance to challenge themselves across a scenic and well-marked route, catering to runners of all experience levels, from seasoned marathoners to those aiming to complete their first 42.195 kilometers.",
                            ImageUrl = "https://raceid.com/organizer/wp-content/uploads/2022/08/cost-marathon-featured-image-blog-10.png",
                            IsDeleted = false,
                            StartDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartHour = new DateTime(2024, 11, 22, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Marathon",
                            UserId = "59c4ebcd-35ca-4c88-aa6e-7a356eddc926"
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Exercise identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of exercise");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            ExerciseName = "HackSquat"
                        },
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            ExerciseName = "Deadlift"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            ExerciseName = "Bulgarian Split Squat"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            ExerciseName = "LegPress"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            ExerciseName = "Calf Raise"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            ExerciseName = "Squat"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            ExerciseName = "Lunge"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 6,
                            ExerciseName = "Arnold Press"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            ExerciseName = "Barbell Row"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 4,
                            ExerciseName = "Bench Press"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            ExerciseName = "Bicep Curl"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 4,
                            ExerciseName = "Cable Crossover"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 4,
                            ExerciseName = "Chest Fly"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            ExerciseName = "Close Grip Bench Press"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            ExerciseName = "Concentration Curl"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            ExerciseName = "Crunch"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 4,
                            ExerciseName = "Dumbbell Pullover"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 6,
                            ExerciseName = "Face Pull"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 6,
                            ExerciseName = "Front Raise"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            ExerciseName = "Hammer Curl"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 4,
                            ExerciseName = "Incline Bench Press"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 6,
                            ExerciseName = "Lateral Raise"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            ExerciseName = "Lat Pulldown"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            ExerciseName = "Leg Raises"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            ExerciseName = "Mountain Climbers"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 6,
                            ExerciseName = "Overhead Press"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            ExerciseName = "Overhead Tricep Extension"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            ExerciseName = "Plank"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            ExerciseName = "Pull Up"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 4,
                            ExerciseName = "Push Up"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            ExerciseName = "Russian Twist"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            ExerciseName = "Seated Cable Row"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            ExerciseName = "Side Plank"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 3,
                            ExerciseName = "T-Bar Row"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            ExerciseName = "Tricep Dip"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 6,
                            ExerciseName = "Upright Row"
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.ProgramExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ProgramExercise identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasComment("Exercise identifier");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasComment("Program identifier");

                    b.Property<int>("Reps")
                        .HasColumnType("int")
                        .HasComment("Repetition count of exercise");

                    b.Property<int>("Sets")
                        .HasColumnType("int")
                        .HasComment("Sets count of exercise");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramExercises");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ExerciseId = 3,
                            ProgramId = 1,
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            Id = 1,
                            ExerciseId = 1,
                            ProgramId = 1,
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            Id = 4,
                            ExerciseId = 4,
                            ProgramId = 1,
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            Id = 2,
                            ExerciseId = 2,
                            ProgramId = 1,
                            Reps = 10,
                            Sets = 3
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("int")
                        .HasComment("The training program that is rated");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The user who rated the training program");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TrainingProgramId = 1,
                            UserId = "99b6038d-69be-4503-b7e6-baa93b476034",
                            Value = 5
                        },
                        new
                        {
                            Id = 2,
                            TrainingProgramId = 1,
                            UserId = "3ca894f3-b3ef-493f-a694-8c3ef2b2c855",
                            Value = 4
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Program identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("https://w7.pngwing.com/pngs/83/516/png-transparent-workout-dumbbells-weightlifting-dumbell-gym-thumbnail.png")
                        .HasComment("Program's banner");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if program is deleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Trainer identifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingPrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            ImageUrl = "https://athleanx.com/wp-content/uploads/2022/09/LEG-WORKOUTS.png",
                            IsDeleted = false,
                            UserId = "59c4ebcd-35ca-4c88-aa6e-7a356eddc926"
                        });
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.UserProgram", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasComment("Which training program the user is subscriber to");

                    b.HasKey("UserId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("UsersPrograms");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AboutDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Inspirational description about the user");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("First name of a user");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User's gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Last name of a user");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User profile picture");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "3ca894f3-b3ef-493f-a694-8c3ef2b2c855",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "060dcbee-5f16-4311-9134-77ef0b7fd901",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user@gmail.com",
                            NormalizedUserName = "user@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqBaSni2U+kFpZ91FwCB3QNxi41wjMQ5HfAjw7esLiqzKeey3KB6z5HCcq7DRLYvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1cd87dbe-2753-4536-a729-23adaa5cc785",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com",
                            FirstName = "User",
                            Gender = "Male",
                            LastName = "User",
                            ProfilePicture = "https://p7.hiclipart.com/preview/355/848/997/computer-icons-user-profile-google-account-photos-icon-account.jpg"
                        },
                        new
                        {
                            Id = "59c4ebcd-35ca-4c88-aa6e-7a356eddc926",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "935ee059-d4cb-4ce3-8ada-04e2aae13f70",
                            Email = "trainer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "trainer@gmail.com",
                            NormalizedUserName = "trainer@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJz02HCcqZiJ1XJCARpgglpo7zUgLfnLc8La5Ls9ICfGVUQ/4YtZ/UIiLFVZq5Zraw==",
                            PhoneNumber = "0878080808",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78e24795-9b27-4826-ac5b-f2df15bc2bfe",
                            TwoFactorEnabled = false,
                            UserName = "trainer@gmail.com",
                            FirstName = "Trainer",
                            Gender = "Female",
                            LastName = "Trainer",
                            ProfilePicture = "https://www.pngitem.com/pimgs/m/146-1468479_my-profile-icon-blank-profile-picture-circle-hd.png"
                        },
                        new
                        {
                            Id = "e4fe197a-ffd1-45ec-ac7b-a203a82aa523",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8a0277e-2226-4d75-b69f-0c8cf8814a45",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4S746syyRDyz5LeKdZUmprSd4Ck5cv3JCFCvQ7AQxrcg2kAMyhWtw0Qj6ajtNUrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75a35a55-6f9b-454a-9c7d-f85199066b60",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastName = "Admin",
                            ProfilePicture = "https://www.pngmart.com/files/21/Admin-Profile-Vector-PNG-Clipart.png"
                        },
                        new
                        {
                            Id = "99b6038d-69be-4503-b7e6-baa93b476034",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b502e7e-7651-4a7a-9a09-390888e87868",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@gmail.com",
                            NormalizedUserName = "user1@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpUb7r/roOQqcLQU3gHte2aHGV3Cj0W8iFjtHwcbbYt0On6y9MpBU10TVvC6xl4jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93b62b10-774e-4e88-8642-47208ba4575c",
                            TwoFactorEnabled = false,
                            UserName = "user1@gmail.com",
                            FirstName = "Pesho",
                            Gender = "Male",
                            LastName = "Peshov",
                            ProfilePicture = "https://p7.hiclipart.com/preview/355/848/997/computer-icons-user-profile-google-account-photos-icon-account.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeakFit.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Event", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.ProgramExercise", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeakFit.Infrastructure.Data.Models.TrainingProgram", "Program")
                        .WithMany("Exercises")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Rating", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.TrainingProgram", "TrainingProgram")
                        .WithMany("Ratings")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeakFit.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.TrainingProgram", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Programs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeakFit.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.UserProgram", b =>
                {
                    b.HasOne("PeakFit.Infrastructure.Data.Models.TrainingProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeakFit.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.Event", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.TrainingProgram", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("PeakFit.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
